struct idMidnightCameraData
{
    // These properties are always valid.  Interpolation only occurs between a clip and keys within that clip, not between clips. (Degrees) Field of view delta applied to FoV in animation.
    float deltaFoV; // Offset: 0x0

    // (Meters) Delta distance applied to the focal plane distance in the animation. {{ _nits = m }}
    float deltaFocalPlane; // Offset: 0x4

    // (No units) Lens f number
    float fNumber; // Offset: 0x8

    // if disabled will not push any dof data
    bool dofEnabled; // Offset: 0xC

    // if disabled will not push any dof near data
    bool dofNearEnabled; // Offset: 0xD

    // (Scalar) Relative scale of desired nearDoF to calculated nearDoF
    float scaleNearDoF; // Offset: 0x10

    // (Meters) Delta applied to near dof limit plane after calculation from len optics.
    float deltaNearDoFLimit; // Offset: 0x14

    // (Scalar) Relative scale of desired nearDoF amount of blur applied
    float scaleNearDoFAmount; // Offset: 0x18

    // (Scalar) Relative scale of desired farDoF to calculated farDoF
    float scaleFarDoF; // Offset: 0x1C

    // (Meters) If this is > 0 then it is a delta relative to the FOCAL PLANE (not calculated far dof limit).
    float deltaFarDoFLimit; // Offset: 0x20

    // (Scalar) Relative scale of desired farDoF amount of blur applied
    float scaleFarDoFAmount; // Offset: 0x24

    // To work around the issue of blending between two frames, one that has m_deltaFarDoFLimit set to 0 (use calculated value) and the second that has m_deltaFarDoFLimit > 0 ( use a distance relative to focal plane ), this is used. The problem is that at the time of interpolation we do not know the calculated dof far limit so we cannot blend between it. For individual key frames this is 0 if m_deltaFarDoFLimit == 0, and 1 if m_deltaFarDoFLimit > 0 For keyframes generated by interpolation between two frames as specified above, this value is a blend specifying how the result of ( FocalPlane + deltaFarDoFLimit ) should be blended with the calculated value.
    float deltaFarDoFLimitBlend; // Offset: 0x28

    // (Meters) Delta applied to near plane. {{ _nits = m }}
    float deltaNearPlane; // Offset: 0x2C

    // (0-1) Minimum amount of blur to apply to pixels beyong the far DoF plane.
    float minFarBlurAmount; // Offset: 0x30

    // The environment to use for this clip ( or none to use the default )
    idDeclEnv* envOverride; // Offset: 0x38

    // Blending time for env override
    idTypesafeTime < int , millisecondUnique_t , 1000 > envOverrideBlendTime; // Offset: 0x40

    // How to handle exposure during this clip
    midnightCameraExposureMode_t exposureMode; // Offset: 0x44

    // If exposureMode == MANUAL this is the base exposure value set.
    float manualExposure; // Offset: 0x48

    // Should the filmic curve parameters be overridden?
    bool filmicCurveOverride; // Offset: 0x4C

    // Filmic curve shadow scale
    float filmicCurveShadowsScale; // Offset: 0x50

    // Filmic curve midtones scale
    float filmicCurveMidtonesScale; // Offset: 0x54

    // Filmic curve highlights scale
    float filmicCurveHighlightsScale; // Offset: 0x58

    // Filmic curve whitepoint
    float filmicCurveWhitePoint; // Offset: 0x5C

    // The current clip is a closeup.
    bool closeUp; // Offset: 0x60

    // Scale to apply to the density of all light scattering volumes.
    float lightScatteringDensityScale; // Offset: 0x64

    bool usePlayerFOV; // Offset: 0x68

}; // Size: 0x70
