struct idTarget_Spawn_Parent : idTarget
{
    enum boundsTest_t : int
    {
        BOUNDSTEST_NONE = 0,
        BOUNDSTEST_FALSE = 1,
        BOUNDSTEST_TRUE = 2
    };

    enum targetSpawn_LOSTest : int
    {
        LOS_NONE = 0,
        LOS_TRUE = 1,
        LOS_FALSE = 2
    };

    enum targetSpawn_PlayerTest : int
    {
        PLAYER_SP = 0,
        PLAYER_ANY_COOP = 1,
        PLAYER_ALL_COOP = 2
    };

    struct idSharedSpawnSettings
    {
        // if set, will override the group name on the target when it is spawned
        idStr groupName; // Offset: 0x0

        // if set, will override the death trigger on the target when it is spawned
        idManagedClassPtr < idEntity > deathTrigger; // Offset: 0x30

        // override for max radius at which the AI will check for cover {{ units = m }}
        float coverRadius; // Offset: 0x50

        // override for max distance for cover checks {{ units = m }}
        float maxEnemyCoverDistance; // Offset: 0x54

    }; // Size: 0x58

    struct idSpawnConditions
    {
        // maximum number of entities this target will spawn
        int maxCount; // Offset: 0x0

        // if > 0.0 the spawner can only be used every reuseDelaySec seconds
        float reuseDelaySec; // Offset: 0x4

        // if BOUNDSTEST_TRUE test the bounds to make sure no entity is already there, if BOUNDSTEST_FALSE don't test bounds, if BOUNDSTEST_NONE use parent value or BOUNDSTEST_FALSE if there is no parent
        idTarget_Spawn_Parent::boundsTest_t boundsTestType; // Offset: 0x8

        // if > 0.0 degrees, the spawner must be within this angle of the player's view, if < 0.0 degrees, must not be within this angle of the player's view
        float fovCheck; // Offset: 0xC

        // generated at spawn time
        float cosOfFovCheck; // Offset: 0x10

        // player can be no closer then this to the spawner {{ units = m }}
        float minDistance; // Offset: 0x14

        // if > 0.0 player can bo no farther away then this from the spawner {{ units = m }}
        float maxDistance; // Offset: 0x18

        // Distance to consider other spawners as neighbors. When this spawner activates, it set neighbors as having just spawned. {{ units = m }}
        float neighborSpawnerDistance; // Offset: 0x1C

        // COMBINE this with an fov test please. LOS_NONE no test, LOS_TRUE must be in LOS, LOS_FALSE must not be in LOS
        idTarget_Spawn_Parent::targetSpawn_LOSTest LOS_Test; // Offset: 0x20

        // which player to test for this spawner
        idTarget_Spawn_Parent::targetSpawn_PlayerTest playerToTest; // Offset: 0x24

        // entity at location to do LOS, FOV, and distance checks
        idManagedClassPtr < idInfo_SpawnConditionProxy > conditionProxy; // Offset: 0x28

        // filled out by condition proxy {{ units = m }}
        idVec3 conditionProxyOrigin; // Offset: 0x48

    }; // Size: 0x58

    // editable settings that determine if the spawner is available
    idTarget_Spawn_Parent::idSpawnConditions spawnConditions; // Offset: 0xB88

    // editable settings that can be passed down to a target_spawn
    idTarget_Spawn_Parent::idSharedSpawnSettings spawnEditableShared; // Offset: 0xBE0

    // this data gets auto-generated by the editor
    idList < idSpawnerEntityDef , TAG_IDLIST , false > entityDefs; // Offset: 0xC38

    // used in conjunction with the archetype setting. the conductor will only spawn this type at this node
    spawnAIType_t conductorEntityAIType; // Offset: 0xC50

    int entityDefIndex; // Offset: 0xC54

    // This is the raw entity def list when the target_spawner is initially spawned.
    idList < idSpawnerEntityDef , TAG_IDLIST , false > initialEntityDefs; // Offset: 0xC58

}; // Size: 0xC70
